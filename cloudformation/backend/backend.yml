AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloud Resume Challenge Backend - Lambda, API Gateway, DynamoDB'

Parameters:
  LambdaCodeBucket:
    Type: String
    Description: "S3 bucket where the Lambda function code is stored."
  StageName:
    Type: String
    Description: "The name of the API Gateway stage"
    Default: dev

Resources:
  VisitorCountTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-VisitorCount'
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    DeletionPolicy: Delete

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-VisitorCount'

  VisitorCounterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-visitorCounter'
      Handler: visitor_counter.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: visitor_counter.zip
      Runtime: python3.9
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref VisitorCountTable

  VisitorCounterAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-VisitorCounterAPI'

  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt VisitorCounterAPI.RootResourceId
      PathPart: 'count'
      RestApiId: !Ref VisitorCounterAPI

  APIGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref APIResource
      RestApiId: !Ref VisitorCounterAPI
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt VisitorCounterFunction.Arn

  APIOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref APIResource
      RestApiId: !Ref VisitorCounterAPI
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - APIGetMethod
      - APIOptionsMethod
    Properties:
      RestApiId: !Ref VisitorCounterAPI
      StageName: !Ref StageName
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VisitorCounterFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VisitorCounterAPI}/*/GET/count'

Outputs:
  StageName:
    Description: "Stage Name"
    Value: !Ref StageName
  ApiUrl:
    Description: "API Gateway URL"
    Value: !Sub 'https://${VisitorCounterAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/count'
  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt VisitorCounterFunction.Arn
  DynamoDBTableName:
    Description: "Name of the DynamoDB table"
    Value: !Ref VisitorCountTable

